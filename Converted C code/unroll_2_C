#include <math.h>

// Constants
static const float cn1_sor_map_22_scal = 0.333333333333333;
static const float cn2l_sor_map_22_scal = 0.5;
static const float cn2s_sor_map_22_scal = 0.5;
static const float cn3l_sor_map_22_scal = 0.5;
static const float cn3s_sor_map_22_scal = 0.5;
static const float cn4l_sor_map_22_scal = 0.5;
static const float cn4s_sor_map_22_scal = 0.5;
static const int omega_sor_map_22_scal = 1;
// ...

// Function declaration
void stage_kernel_1(int global_id_0, float* p0_0, float* rhs_0, float* p3_1);

void stage_kernel_1(int global_id_0, float* p0_0, float* rhs_0, float* p3_1)
{
    int i_sor_map_70_scal;
    int j_sor_map_70_scal;
    int k_sor_map_70_scal;
    float reltmp_sor_map_70_scal;
    int i_range_sor_map_70_scal;
    int j_range_sor_map_70_scal;
    int k_range_sor_map_70_scal;
    int i_rel_sor_map_70_scal;
    int j_rel_sor_map_70_scal;
    int k_rel_sor_map_70_scal;
    // ...

    float svec_p3_1_7[9][9][9];
    int s_idx_1;
    int s_idx_2;
    int s_idx_3;
    // ...

    int idx;
    idx = global_id_0;

    for (s_idx_1 = 1; s_idx_1 <= 9; s_idx_1++)
    {
        for (s_idx_2 = 1; s_idx_2 <= 9; s_idx_2++)
        {
            for (s_idx_3 = 1; s_idx_3 <= 9; s_idx_3++)
            {
                if ((idx + s1[s_idx_1 - 1] + s1[s_idx_2 - 1] + s1[s_idx_3 - 1] >= 1) &&
                    (idx + s1[s_idx_1 - 1] + s1[s_idx_2 - 1] + s1[s_idx_3 - 1] <= 853128))
                {
                    svec_p3_1_7[s_idx_1 - 1][s_idx_2 - 1][s_idx_3 - 1] = p0_0[idx + s1[s_idx_1 - 1] + s1[s_idx_2 - 1] + s1[s_idx_3 - 1]];
                }
                else
                {
                    svec_p3_1_7[s_idx_1 - 1][s_idx_2 - 1][s_idx_3 - 1] = p0_0[idx];
                }
            }
        }
    }
    // The rest of the code follows a similar pattern...
}

! test_sor_unroll.cuf
program test_sor_unroll
use cudafor
use sor_params
use sor_routines
real, allocatable, device :: p0(:,:,:), p1(:,:,:), rhs(:,:,:), p2(:,:,:), p3(:,:,:), p4(:,:,:)
real, allocatable :: host_p0(:,:,:)
integer :: iter, niters, i, j, k
integer :: clock_rate
integer, dimension(0:1) :: timestamp
integer, dimension(3) :: gridDim, blockDim, arr_size
integer :: error

attributes(global) subroutine initialize_arrays(arr, arr_size)
  integer, value :: arr_size(3)
  real, dimension(0:arr_size(1),0:arr_size(2),0:arr_size(3)), device :: arr
  integer :: i, j, k

  i = threadIdx%x + (blockIdx%x-1) * blockDim%x
  j = threadIdx%y + (blockIdx%y-1) * blockDim%y
  k = threadIdx%z + (blockIdx%z-1) * blockDim%z

  if (i <= arr_size(1) .and. j <= arr_size(2) .and. k <= arr_size(3)) then
    arr(i,j,k) = 1.0
  end if
end subroutine initialize_arrays

print *, "Starting allocations"
allocate(p0(0:im+1,0:jm+1,0:km+1),stat=error)
if (error /= cudaSuccess) then
    print *, "Memory allocation failed for p0 with error:", cudaGetErrorString(error)
    stop
end if

allocate(p1(0:im+1,0:jm+1,0:km+1),stat=error)
if (error /= cudaSuccess) then
    print *, "Memory allocation failed for p1 with error:", cudaGetErrorString(error)
    stop
end if

allocate(rhs(0:im+1,0:jm+1,0:km+1),stat=error)
if (error /= cudaSuccess) then
    print *, "Memory allocation failed for rhs with error:", cudaGetErrorString(error)
    stop
end if

allocate(p2(0:im+1,0:jm+1,0:km+1),stat=error)
if (error /= cudaSuccess) then
    print *, "Memory allocation failed for p2 with error:", cudaGetErrorString(error)
    stop
end if

allocate(p3(0:im+1,0:jm+1,0:km+1),stat=error)
if (error /= cudaSuccess) then
    print *, "Memory allocation failed for p3 with error:", cudaGetErrorString(error)
    stop
end if

allocate(p4(0:im+1,0:jm+1,0:km+1),stat=error)
if (error /= cudaSuccess) then
    print *, "Memory allocation failed for p4 with error:", cudaGetErrorString(error)
    stop
end if

allocate(host_p0(0:im+1,0:jm+1,0:km+1),stat=error)
if (error /= cudaSuccess) then
    print *, "Memory allocation failed for host_p0 with error:", cudaGetErrorString(error)
    stop
end if
print *, "Allocations completed"

print *, "Starting array initialization"
blockDim = [16,16,4]
gridDim = [(im+2+blockDim(1)-1)/blockDim(1), (jm+2+blockDim(2)-1)/blockDim(2), (km+2+blockDim(3)-1)/blockDim(3)]
arr_size = [im+1, jm+1, km+1]

call initialize_arrays<<<gridDim, blockDim>>>(p0, arr_size)
call initialize_arrays<<<gridDim, blockDim>>>(rhs, arr_size)
error = cudaDeviceSynchronize()
if (error /= cudaSuccess) then
    print *, "Error during array initialization: ", cudaGetErrorString(error)
    stop
end if
print *, "Array initialization completed"

niters = 12/4
call system_clock(timestamp(0), clock_rate)

print *, "Starting the main loop"

do iter = 1,niters
    print *, "Iteration: ", iter
    call sor<<<gridDim, blockDim>>>(p0,p1,rhs,gridDim,blockDim)
    error = cudaDeviceSynchronize()
    if (error /= cudaSuccess) then
        print *, "First call to sor failed with error: ", cudaGetErrorString(error)
        stop
    end if

    call sor<<<gridDim, blockDim>>>(p1,p2,rhs,gridDim,blockDim)
    error = cudaDeviceSynchronize()
    if (error /= cudaSuccess) then
        print *, "Second call to sor failed with error: ", cudaGetErrorString(error)
        stop
    end if

    call sor<<<gridDim, blockDim>>>(p2,p3,rhs,gridDim,blockDim)
    error = cudaDeviceSynchronize()
    if (error /= cudaSuccess) then
        print *, "Third call to sor failed with error: ", cudaGetErrorString(error)
        stop
    end if

    call sor<<<gridDim, blockDim>>>(p3,p4,rhs,gridDim,blockDim)
    error = cudaDeviceSynchronize()
    if (error /= cudaSuccess) then
        print *, "Fourth call to sor failed with error: ", cudaGetErrorString(error)
        stop
    end if

    if (size(p0) == size(p4)) then
        p0 = p4
    else
        print *, 'Size mismatch between p0 and p4'
    end if
end do

print *, "Main loop completed"
call system_clock(timestamp(1), clock_rate)
host_p0 = p0
print '(f8.3)',(timestamp(1)-timestamp(0))/ real(clock_rate)
print *, "Result: ", host_p0(im/2,jm/2,km/2)

deallocate(p0)
deallocate(p1)
deallocate(rhs)
deallocate(p2)
deallocate(p3)
deallocate(p4)
deallocate(host_p0)
end program

! gen_sor_superkernel.cuf
program main
use cudafor
use singleton_module_sor_superkernel, only : sor_superkernel
implicit none
integer, parameter :: im=100, jm=100, km=80
integer, device, dimension(:), allocatable :: d_global_id
integer, dimension(:), allocatable :: h_global_id
integer :: i
real, device, dimension(:), allocatable :: p0_0, rhs_0, p2_1
real, dimension(:), allocatable :: p0_0_host
integer, parameter :: st_stage_kernel_1=1
integer :: state_ptr
integer, device :: state_ptr_d
integer :: iter
integer :: error

allocate(p0_0(1:(im+1)*(jm+1)*(km+1)))
allocate(rhs_0(1:(im+1)*(jm+1)*(km+1)))
allocate(p2_1(1:(im+1)*(jm+1)*(km+1)))

p0_0 = 1.0
rhs_0 = 1.0

state_ptr = st_stage_kernel_1
state_ptr_d = state_ptr

allocate(h_global_id(8531*128))
do i = 1, 8531*128
    h_global_id(i) = i-1
end do

allocate(d_global_id(8531*128))
d_global_id = h_global_id

do iter = 1, 100
    call sor_superkernel<<<8531,128>>>(d_global_id, p0_0, rhs_0, p2_1,state_ptr_d)
    error = cudaDeviceSynchronize()
    if (error /= cudaSuccess) then
        print *, 'Error synchronizing: ', cudaGetErrorString(error)
        stop
    end if
end do

allocate(p0_0_host(1:(im+1)*(jm+1)*(km+1)))
p0_0_host = p0_0
print *, p0_0_host((im+2)*(jm+2)*(km+2)/2+(jm+2)*(km+2)/2+(km+2)/2)

end program main

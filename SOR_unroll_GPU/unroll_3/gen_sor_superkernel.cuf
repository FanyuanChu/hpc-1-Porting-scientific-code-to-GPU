! gen_sor_superkernel.cuf
module initialization_module
  use cudafor
  contains
  attributes(global) subroutine init_kernel(p0_0, rhs_0, n)
    implicit none
    integer :: i
    real, dimension(:), device :: p0_0, rhs_0
    integer, value :: n

    i = threadIdx%x + (blockIdx%x - 1) * blockDim%x
    if (i <= n) then
      p0_0(i) = 1.0
      rhs_0(i) = 1.0
    end if
  end subroutine init_kernel
end module initialization_module

program main
  use cudafor
  use singleton_module_sor_superkernel, only : sor_superkernel
  use initialization_module, only : init_kernel
  implicit none
  integer, parameter :: im=100
  integer, parameter :: jm=100
  integer, parameter :: km=80
  integer :: i
  integer :: j
  integer :: k
  integer :: global_id_0
  real, dimension(:), allocatable, device :: p0_0_dev, rhs_0_dev, p3_1_dev
  real, dimension(1:853128) :: p0_0, rhs_0, p3_1
  integer, parameter :: st_stage_kernel_1=1
  integer, device :: state_ptr_dev
  integer, parameter :: niters=10
  integer :: iter
  integer :: clock_rate
  integer, dimension(0:1) :: timestamp
  integer, parameter :: blockSize = 256
  integer :: numBlocks
  integer :: n

  !
  real, dimension(:), allocatable :: p0_0_host, rhs_0_host, p3_1_host
  integer :: index

  n = (im+1)*(jm+1)*(km+1)
  numBlocks = (n + blockSize - 1) / blockSize

  allocate(p0_0_dev(n), rhs_0_dev(n), p3_1_dev(n))

  call init_kernel<<<numBlocks, blockSize>>>(p0_0_dev, rhs_0_dev, n)


  ! Allocate memory for host arrays
  !
  allocate(p0_0_host(n))
  allocate(rhs_0_host(n))
  allocate(p3_1_host(n))

  p0_0_host = p0_0_dev
  rhs_0_host = rhs_0_dev

  !print *, 'After initialization:'
  !print *, 'p0_0:', p0_0_host(20000:20100)
  !print *, 'rhs_0:', rhs_0_host(20000:20100)
  !

  p0_0_dev = p0_0_dev
  rhs_0_dev = rhs_0_dev
  
  state_ptr_dev = st_stage_kernel_1
  call system_clock(timestamp(0), clock_rate)
  do iter = 1, niters
    print *, iter
    call sor_superkernel<<<853128, 1>>>(p0_0_dev, rhs_0_dev, p3_1_dev, state_ptr_dev)
  end do
  call system_clock(timestamp(1), clock_rate)
  print '(f6.3)',(timestamp(1)-timestamp(0))/ real(clock_rate)
  p3_1 = p3_1_dev



  p3_1_host = p3_1_dev  ! Copy data from device to host after computation
  ! Print the first 10 values of p3_1
  print *, 'Final result1-100:'
  print *, 'p3_1:', p3_1(1:100)
  print *, 'Final result:'
  print *, 'p3_1:', p3_1(8000:9000)
  print *, 'Final result10000-10100:'
  print *, 'p3_1:', p3_1(10000:10100)
  print *, 'Final result:'
  print *, 'p3_1:', p3_1(20000:20100)
  ! Calculate the index
  index = (im+2)*(jm+2)*(km+2)/2+(jm+2)*(km+2)/2+(km+2)/2
  print *, 'Index:', index
  print *, 'Value at index:', p3_1_host(index)

  print *, p3_1((im+2)*(jm+2)*(km+2)/2+(jm+2)*(km+2)/2+(km+2)/2)

  ! to deallocate the memory
  deallocate(p0_0_host)
  deallocate(rhs_0_host)
  deallocate(p3_1_host)
end program main                                                                                                                                                             

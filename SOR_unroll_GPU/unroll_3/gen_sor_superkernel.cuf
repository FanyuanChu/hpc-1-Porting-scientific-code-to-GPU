module initialization_module
  use cudafor
  contains
  subroutine init_kernel(p0_0, rhs_0, n)
    implicit none
    integer :: i
    real, dimension(:), intent(inout) :: p0_0, rhs_0
    integer, value :: n

    do i = 1, n
      p0_0(i) = 1.0
      rhs_0(i) = 1.0
    end do
  end subroutine init_kernel
end module initialization_module

program main
  use cudafor
  use singleton_module_sor_superkernel, only : sor_superkernel
  use initialization_module, only : init_kernel
  implicit none
  integer, parameter :: im=100
  integer, parameter :: jm=100
  integer, parameter :: km=80
  integer :: i
  integer :: j
  integer :: k
  integer :: global_id_0
  real, dimension(:), allocatable, managed :: p0_0_dev, rhs_0_dev, p3_1_dev
  real, dimension(1:853128) :: p0_0, rhs_0, p3_1
  integer, parameter :: st_stage_kernel_1=1
  integer, device :: state_ptr_dev
  integer, parameter :: niters=10
  integer :: iter
  integer :: clock_rate
  integer, dimension(0:1) :: timestamp
  integer, parameter :: blockSize = 256
  integer :: numBlocks
  integer :: n

  n = (im+1)*(jm+1)*(km+1)
  numBlocks = (n + blockSize - 1) / blockSize

  allocate(p0_0_dev(n), rhs_0_dev(n), p3_1_dev(n))

  call init_kernel(p0_0, rhs_0, n)

  p0_0_dev = p0_0
  rhs_0_dev = rhs_0

  state_ptr_dev = st_stage_kernel_1
  call system_clock(timestamp(0), clock_rate)
  do iter = 1, niters
    print *, iter
    call sor_superkernel<<<numBlocks, blockSize>>>(p0_0_dev, rhs_0_dev, p3_1_dev, state_ptr_dev)
  end do
  call system_clock(timestamp(1), clock_rate)
  print '(f6.3)',(timestamp(1)-timestamp(0))/ real(clock_rate)
  p3_1 = p3_1_dev
  print *, p3_1((im+2)*(jm+2)*(km+2)/2+(jm+2)*(km+2)/2+(km+2)/2)
end program main
